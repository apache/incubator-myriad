# -*- mode: ruby -*-
# vim: set ft=ruby ts=2 et :

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

VAGRANTFILE_API_VERSION = "2"

# Tested with Vagrant version:
Vagrant.require_version ">= 1.7.2"

# Require YAML module
require 'yaml'

def fail_with_message(msg)
    fail Vagrant::Errors::VagrantError.new, msg
end

def check_minimal_env()
    if ENV['MESOS_ARCH'].nil? || ENV['MESOS_ARCH'].empty?
        fail_with_message "You have to set MESOS_ARCH environment variable!"
    end
    if ENV['HADOOP_VERSION'].nil? || ENV['HADOOP_VERSION'].empty?
        fail_with_message "You have to set HADOOP_VERSION environment variable!"
    end
    if ENV['ZOOKEEPER_VERSION'].nil? || ENV['ZOOKEEPER_VERSION'].empty?
        fail_with_message "You have to set ZOOKEEPER environment variable!"
    end
end

# Sanity checks
check_minimal_env()

# Read YAML file with cluster details: The cluster flavor.
config_file = 'config/cluster-' + ENV['MESOS_ARCH'] + ".yaml"
if File.exists?(config_file)
    cluster = YAML.load_file(config_file)
else
    fail_with_message "Cluster definition file: #{config_file} was not found!"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.insert_key = false

  i = 0
  cluster.each do |servers|
    # VM definition
    config.vm.define servers["name"] do |node|
      node.vm.box = servers["box"]
      node.vm.hostname = servers["name"]

      if node.vm.hostname == 'build' && !ENV['MYRIAD_SOURCES'].nil?
        node.vm.synced_folder ENV['MYRIAD_SOURCES'], "/mnt", type:"nfs",
            linux__nfs_options: ['rw','no_subtree_check','no_root_squash','async'],
            nfs_udp: false
      else
        config.vm.synced_folder ".", "/vagrant", disabled: true
      end

      node.vm.network "private_network", ip: servers["ip"]
      node.vm.provider :libvirt do |domain|
        domain.uri = 'qemu+unix:///system'
        domain.driver = 'kvm'
        domain.memory = servers["mem"]
        domain.cpus = servers['cpu']
        if servers.key?('aditional_disk')
            for disk in servers['aditional_disk']
                domain.storage :file, :size => disk
            end
        end
      end
      i += 1
      if i == cluster.length
          node.vm.provision :ansible do |ansible|
            ansible.verbose = "vv"
            ansible.inventory_path = "provisioning/inventory.py"
            ansible.playbook = "provisioning/site.yml"
            ansible.limit = "all"
          end # provison
      end # if
    end # config
  end # cluster
end # vagrant
